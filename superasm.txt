global f

val1: dd 0.05
val2: dd 999.0
val3: dd 0.01
val4: dd 3.0
f:
  ; begin
  push rbp
  mov rbp, rsp
  sub rsp, 96
  mov QWORD  [rbp-72], rdi
  mov DWORD  [rbp-76], esi
  mov DWORD  [rbp-80], edx
  mov DWORD  [rbp-84], ecx
  mov QWORD  [rbp-96], r8
  movss DWORD  [rbp-88], xmm0
  mov DWORD  [rbp-100], r9d

  ; ustaw pointer na lewy dol bitmapy
  mov eax, DWORD  [rbp-80]
  sub eax, 1
  imul eax, DWORD  [rbp-84]
  cdqe
  add QWORD  [rbp-72], rax

  ; ustaw wartosc pikseli dla x
  mov eax, DWORD  [rbp-100]
  lea ecx, [rax+rax]
  mov eax, DWORD  [rbp-76]
  cdq
  idiv ecx
  cvtsi2ss xmm0, eax
  movss DWORD  [rbp-20], xmm0

  ; ustaw jaka jest najm wart x
  cvtsi2ss xmm1, DWORD  [rbp-76]
  movss xmm0, DWORD  [rbp-20]
  addss xmm0, xmm0
  divss xmm1, xmm0
  movaps xmm0, xmm1
  movss DWORD  [rbp-24], xmm0
  fld DWORD [rbp-24]
  fchs
  fstp DWORD [rbp-24]

  ; ustaw jaka jest najm wart y
  cvtsi2ss xmm1, DWORD  [rbp-80]
  movss xmm0, DWORD  [rbp-20]
  addss xmm0, xmm0
  divss xmm1, xmm0
  movaps xmm0, xmm1
  movss DWORD  [rbp-28], xmm0
  fld DWORD [rbp-28]
  fchs
  fstp DWORD [rbp-28]

  ; init zmienne
  pxor xmm0, xmm0
  movss DWORD  [rbp-32], xmm0

  pxor xmm0, xmm0
  movss DWORD  [rbp-36], xmm0

  pxor xmm0, xmm0
  movss DWORD  [rbp-4], xmm0

  ; przypisz x wartosc najm x
  movss xmm0, DWORD  [rbp-24]
  movss DWORD  [rbp-8], xmm0

  ; poprzedni x to aktualny x
  movss xmm0, DWORD  [rbp-8]
  movss DWORD  [rbp-12], xmm0

  ; zmienne
  pxor xmm0, xmm0
  movss DWORD  [rbp-40], xmm0

  pxor xmm0, xmm0
  movss DWORD  [rbp-44], xmm0

  mov DWORD  [rbp-48], 1

  ; x += 0.05
  movss xmm1, DWORD  [rbp-8]
  movss xmm0, DWORD  [val1]
  addss xmm0, xmm1
  movss DWORD  [rbp-8], xmm0

  ; maks mozliwe przemieszczenie = pitch*height;
  mov eax, DWORD  [rbp-76]
  imul eax, DWORD  [rbp-80]
  mov edx, eax
  mov eax, edx
  add eax, eax
  add eax, edx
  mov DWORD  [rbp-52], eax

  ; float closestDist = 0;
  pxor xmm0, xmm0
  movss DWORD [rbp-16], xmm0
while_loop:
  ; closest;
  movss xmm0, DWORD  [val2]
  movss DWORD  [rbp-4], xmm0

  ; float closestDist;
  movss xmm0, DWORD [val2]
  movss DWORD [rbp-16], xmm0

  ; check loop
  jmp check_for_loop
for_loop:
  ; xDiff = x - prevX;
  movss xmm0, DWORD  [rbp-8]
  subss xmm0, DWORD  [rbp-12]
  movss DWORD  [rbp-40], xmm0

  ; calculate difference between previous and actual function value
  mov rax, QWORD  [rbp-96]
  movss xmm2, DWORD  [rax]
  movss xmm0, DWORD  [rbp-8]
  mulss xmm0, DWORD  [rbp-8]
  movss xmm1, DWORD  [rbp-12]
  mulss xmm1, DWORD  [rbp-12]
  subss xmm0, xmm1
  mulss xmm2, xmm0
  movaps xmm1, xmm2
  mov rax, QWORD  [rbp-96]
  add rax, 4
  movss xmm0, DWORD  [rax]
  mulss xmm0, DWORD  [rbp-40]
  addss xmm0, xmm1
  movss DWORD  [rbp-32], xmm0

  ; calculate approximation of function
  movss xmm0, DWORD  [rbp-88]
  mulss xmm0, DWORD  [rbp-88]
  movss xmm1, DWORD  [rbp-40]
  mulss xmm1, DWORD  [rbp-40]
  subss xmm0, xmm1
  movss DWORD [rbp-44], xmm0
  fld DWORD [rbp-44]
  fsqrt
  fstp DWORD [rbp-44]

  ; dist = fabs(funVal - y);
  movss xmm0, DWORD  [rbp-32]
  subss xmm0, DWORD  [rbp-44]
  movss DWORD [rbp-36], xmm0
  fld DWORD[rbp-36]
  fabs
  fstp DWORD[rbp-36]

  ; if( dist < closest);
  movss xmm0, DWORD  [rbp-16]
  comiss xmm0, DWORD  [rbp-36]
  jbe next_if

  ; closest = x;
  movss xmm0, DWORD  [rbp-8]
  movss DWORD  [rbp-4], xmm0

  ; closestDist = dist
  movss xmm0, DWORD [rbp-36]
  movss DWORD [rbp-16], xmm0
next_if:
  ; y = -y;
  fld DWORD  [rbp-44]
  fchs
  fstp DWORD [rbp-44]

  ; dist = fabs(funVal - y);
  movss xmm0, DWORD  [rbp-32]
  subss xmm0, DWORD  [rbp-44]
  movss DWORD [rbp-36], xmm0
  fld DWORD[rbp-36]
  fabs
  fstp DWORD[rbp-36]

  ; if( dist < closest)
  movss xmm0, DWORD  [rbp-16]
  comiss xmm0, DWORD  [rbp-36]
  jbe incr_for_loop

  ; closest = x;
  movss xmm0, DWORD  [rbp-8]
  movss DWORD  [rbp-4], xmm0

  ; closestDist = dist
  movss xmm0, DWORD [rbp-36]
  movss DWORD [rbp-16], xmm0
incr_for_loop:
  ; x+= 0.01;
  movss xmm0, DWORD  [val3]
  addss xmm0, DWORD  [rbp-8]
  movss DWORD  [rbp-8], xmm0
check_for_loop:
  ; x < prevX+S
  movss xmm0, DWORD  [rbp-12]
  addss xmm0, DWORD  [rbp-88]
  comiss xmm0, DWORD  [rbp-8]
  ja for_loop

  ; prevX = x;
  movss xmm0, DWORD  [rbp-8]
  movss DWORD  [rbp-12], xmm0

  ; y = coeffs[0]*closest*closest + coeffs[1]*closest + coeffs[2];
  mov rax, QWORD  [rbp-96]
  movss xmm0, DWORD  [rax]
  mulss xmm0, DWORD  [rbp-4]
  movaps xmm1, xmm0
  mulss xmm1, DWORD  [rbp-4]
  mov rax, QWORD  [rbp-96]
  add rax, 4
  movss xmm0, DWORD  [rax]
  mulss xmm0, DWORD  [rbp-4]
  addss xmm1, xmm0
  mov rax, QWORD  [rbp-96]
  add rax, 8
  movss xmm0, DWORD  [rax]
  addss xmm0, xmm1
  movss DWORD  [rbp-44], xmm0

  ; przemiesz = (int)(3*(closest-xPocz)*pixVal - pitch*(y-yPocz)*pixVal);
  movss xmm0, DWORD  [rbp-4]
  movaps xmm1, xmm0
  subss xmm1, DWORD  [rbp-24]
  movss xmm0, DWORD  [val4]
  mulss xmm0, xmm1
  mulss xmm0, DWORD  [rbp-20]
  cvtsi2ss xmm2, DWORD  [rbp-84]
  movss xmm1, DWORD  [rbp-44]
  subss xmm1, DWORD  [rbp-28]
  mulss xmm1, xmm2
  mulss xmm1, DWORD  [rbp-20]
  subss xmm0, xmm1
  cvttss2si eax, xmm0
  mov DWORD  [rbp-48], eax

  ; if(x > (scale-S))
  cvtsi2ss xmm0, DWORD  [rbp-100]
  movaps xmm1, xmm0
  subss xmm1, DWORD  [rbp-88]
  movss xmm0, DWORD  [rbp-8]
  comiss xmm0, xmm1
  ja end

  ; if (przemiesz > maxPrzemiesz || przemiesz < 0)
  mov eax, DWORD  [rbp-48]
  cmp eax, DWORD  [rbp-52]
  jg continue
  cmp DWORD  [rbp-48], 0
  js continue
  mov eax, DWORD  [rbp-48]
  movsx rdx, eax
  mov rax, QWORD  [rbp-72]
  add rax, rdx
  mov BYTE  [rax], 255
  jmp while_loop
continue:
  nop
  jmp while_loop
end:
  nop
  cvtsi2ss xmm0, DWORD  [rbp-52]
  leave
  ret




; [rbp-4]  - najblizsze x
; [rbp-8]  - wartosc x
; [rbp-12] - wartosc poprzedniego
; [rbp-16] - najblizsze przyblizenie
; [rbp-20] - wartosc x w pikselach
; [rbp-24] - jaka jest wartosc namniejszego x
; [rbp-28] - jaka jest wartosc namniejszego y
; [rbp-32] - wartosc funkcji faktyczna
; [rbp-36] - odleglosc miedzy przyblizeniem a wart faktyczna
; [rbp-40] - roznica miedzy poprzednim x a przyblizonym
; [rbp-44] - y przyblizone
; [rbp-48] - przemieszczenie
; [rbp-52] - maksymalne przemieszczenie
; [rbp-72] - Pointer na DATA
; [rbp-76] - width
; [rbp-80] - height
; [rbp-84] - pitch
; [rbp-88] - S
; [rbp-96] - adres na wspolczynniki
; [rbp-100]- skala